# –°–æ–∑–¥–∞–¥–∏–º –ø–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä Telegram-–±–æ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É
telegram_bot_code = '''
import telebot
import numpy as np
import json
import random
import pandas as pd
from datetime import datetime

# –ö–ª–∞—Å—Å –ø—Ä–æ—Å—Ç–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ (—Ç–æ—Ç –∂–µ, —á—Ç–æ –º—ã —Å–æ–∑–¥–∞–ª–∏ –≤—ã—à–µ)
class SimpleNeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.1):
        self.W1 = np.random.randn(input_size, hidden_size) * 0.1
        self.b1 = np.zeros((1, hidden_size))
        self.W2 = np.random.randn(hidden_size, output_size) * 0.1
        self.b2 = np.zeros((1, output_size))
        self.learning_rate = learning_rate
    
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-np.clip(x, -500, 500)))
    
    def forward(self, X):
        self.z1 = np.dot(X, self.W1) + self.b1
        self.a1 = self.sigmoid(self.z1)
        self.z2 = np.dot(self.a1, self.W2) + self.b2
        self.a2 = self.sigmoid(self.z2)
        return self.a2
    
    def predict(self, X):
        return self.forward(X)

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
class EnglishLearningBot:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç—ã
        with open('english_learning_intents.json', 'r', encoding='utf-8') as f:
            self.intents = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.vocab = self.create_vocabulary()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
        self.model = SimpleNeuralNetwork(
            input_size=len(self.vocab),
            hidden_size=16,
            output_size=len(self.intents['intents'])
        )
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        self.train_model()
    
    def create_vocabulary(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏–∑ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        vocab = set()
        for intent in self.intents['intents']:
            for pattern in intent['patterns']:
                words = pattern.lower().split()
                vocab.update(words)
        return sorted(list(vocab))
    
    def text_to_vector(self, text):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–µ–∫—Ç–æ—Ä (bag of words)"""
        words = text.lower().split()
        vector = np.zeros(len(self.vocab))
        for word in words:
            if word in self.vocab:
                vector[self.vocab.index(word)] = 1
        return vector
    
    def train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤"""
        X_train = []
        y_train = []
        
        for i, intent in enumerate(self.intents['intents']):
            for pattern in intent['patterns']:
                vector = self.text_to_vector(pattern)
                X_train.append(vector)
                
                # One-hot encoding –¥–ª—è –∫–ª–∞—Å—Å–∞
                label = np.zeros(len(self.intents['intents']))
                label[i] = 1
                y_train.append(label)
        
        X_train = np.array(X_train)
        y_train = np.array(y_train)
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        for epoch in range(500):
            output = self.model.forward(X_train)
            loss = np.mean((output - y_train) ** 2)
            
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤
            m = X_train.shape[0]
            dZ2 = output - y_train
            dW2 = (1/m) * np.dot(self.model.a1.T, dZ2)
            db2 = (1/m) * np.sum(dZ2, axis=0, keepdims=True)
            
            dZ1 = np.dot(dZ2, self.model.W2.T) * (self.model.a1 * (1 - self.model.a1))
            dW1 = (1/m) * np.dot(X_train.T, dZ1)
            db1 = (1/m) * np.sum(dZ1, axis=0, keepdims=True)
            
            self.model.W2 -= 0.5 * dW2
            self.model.b2 -= 0.5 * db2
            self.model.W1 -= 0.5 * dW1
            self.model.b1 -= 0.5 * db1
    
    def get_response(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        vector = self.text_to_vector(message)
        prediction = self.model.predict(np.array([vector]))
        intent_index = np.argmax(prediction)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        confidence = np.max(prediction)
        if confidence < 0.7:
            return "I'm not sure I understand. Could you please rephrase your question?"
        
        intent = self.intents['intents'][intent_index]
        return random.choice(intent['responses'])

# –°–ª–æ–≤–∞—Ä–∏ —Å —É—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
vocabulary_lessons = {
    'beginner': [
        {'word': 'hello', 'meaning': 'a greeting used when meeting someone', 'example': 'Hello, how are you?'},
        {'word': 'book', 'meaning': 'a set of printed sheets bound together', 'example': 'I am reading a book.'},
        {'word': 'water', 'meaning': 'a clear liquid that forms seas, lakes, rivers', 'example': 'I drink water every day.'},
    ],
    'intermediate': [
        {'word': 'adventure', 'meaning': 'an exciting or unusual experience', 'example': 'Our trip was a great adventure.'},
        {'word': 'knowledge', 'meaning': 'information and skills acquired through experience', 'example': 'Knowledge is power.'},
    ]
}

grammar_lessons = {
    'present_simple': {
        'rule': 'Used for habits, facts, and general truths',
        'structure': 'Subject + Verb (base form) + Object',
        'examples': ['I eat breakfast every morning.', 'She works in an office.', 'The sun rises in the east.']
    },
    'past_simple': {
        'rule': 'Used for completed actions in the past',
        'structure': 'Subject + Verb (past form) + Object',
        'examples': ['I visited Paris last year.', 'She finished her homework.', 'They played football yesterday.']
    }
}

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
class TelegramEnglishBot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.english_bot = EnglishLearningBot()
        self.user_progress = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.register_handlers()
    
    def register_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start_message(message):
            welcome_text = """
üá¨üáß Welcome to English Learning Bot! üá¨üáß

I'm here to help you learn English through:
üìö Vocabulary lessons
üìù Grammar explanations  
üí¨ Conversation practice
üéØ Interactive exercises

Use these commands:
/vocabulary - Learn new words
/grammar - Grammar lessons
/practice - Conversation practice
/progress - Check your progress

Just type anything to start chatting!
            """
            self.bot.send_message(message.chat.id, welcome_text)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message.from_user.id not in self.user_progress:
                self.user_progress[message.from_user.id] = {
                    'level': 'beginner',
                    'lessons_completed': 0,
                    'words_learned': [],
                    'last_activity': datetime.now()
                }
        
        @self.bot.message_handler(commands=['vocabulary'])
        def vocabulary_lesson(message):
            user_id = message.from_user.id
            level = self.user_progress.get(user_id, {}).get('level', 'beginner')
            
            if level in vocabulary_lessons:
                lesson = random.choice(vocabulary_lessons[level])
                response = f"""
üìö Vocabulary Lesson:

Word: *{lesson['word']}*
Meaning: {lesson['meaning']}
Example: _{lesson['example']}_

Try using this word in your own sentence!
                """
                self.bot.send_message(message.chat.id, response, parse_mode='Markdown')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if user_id in self.user_progress:
                    self.user_progress[user_id]['words_learned'].append(lesson['word'])
        
        @self.bot.message_handler(commands=['grammar'])
        def grammar_lesson(message):
            lesson_type = random.choice(list(grammar_lessons.keys()))
            lesson = grammar_lessons[lesson_type]
            
            response = f"""
üìù Grammar Lesson: {lesson_type.replace('_', ' ').title()}

Rule: {lesson['rule']}
Structure: {lesson['structure']}

Examples:
"""
            for example in lesson['examples']:
                response += f"‚Ä¢ {example}\\n"
            
            self.bot.send_message(message.chat.id, response)
        
        @self.bot.message_handler(commands=['practice'])
        def practice_session(message):
            practice_questions = [
                "Tell me about your favorite hobby.",
                "What did you do yesterday?",
                "Describe your ideal weekend.",
                "What are your plans for tomorrow?",
                "Tell me about your family."
            ]
            
            question = random.choice(practice_questions)
            response = f"üó£Ô∏è Practice Time!\\n\\n{question}\\n\\nTake your time and answer in English!"
            self.bot.send_message(message.chat.id, response)
        
        @self.bot.message_handler(commands=['progress'])
        def show_progress(message):
            user_id = message.from_user.id
            progress = self.user_progress.get(user_id, {})
            
            if not progress:
                self.bot.send_message(message.chat.id, "Start learning first! Use /start to begin.")
                return
            
            response = f"""
üéØ Your Learning Progress:

Level: {progress.get('level', 'beginner').title()}
Lessons completed: {progress.get('lessons_completed', 0)}
Words learned: {len(progress.get('words_learned', []))}
Last activity: {progress.get('last_activity', 'Never').strftime('%Y-%m-%d %H:%M') if isinstance(progress.get('last_activity'), datetime) else 'Never'}

Keep up the great work! üåü
            """
            self.bot.send_message(message.chat.id, response)
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            response = self.english_bot.get_response(message.text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.from_user.id
            if user_id in self.user_progress:
                self.user_progress[user_id]['last_activity'] = datetime.now()
            
            self.bot.send_message(message.chat.id, response)
    
    def run(self):
        print("English Learning Bot –∑–∞–ø—É—â–µ–Ω!")
        self.bot.polling(none_stop=True)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å YOUR_BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω)
if __name__ == "__main__":
    # TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ü–æ–ª—É—á–∏—Ç—å —É @BotFather
    # bot = TelegramEnglishBot(TOKEN)
    # bot.run()
    print("–ö–æ–¥ –±–æ—Ç–∞ –≥–æ—Ç–æ–≤! –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —É @BotFather")
'''

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª
with open('english_learning_telegram_bot.py', 'w', encoding='utf-8') as f:
    f.write(telegram_bot_code)

print("–°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –∫–æ–¥ Telegram-–±–æ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É!")
print("–§–∞–π–ª: english_learning_telegram_bot.py")

# –°–æ–∑–¥–∞–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å requirements
requirements = '''numpy==1.21.0
pandas==1.3.0
pyTelegramBotAPI==4.0.0
'''

with open('requirements.txt', 'w') as f:
    f.write(requirements)

print("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª requirements.txt —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")

# –°–æ–∑–¥–∞–¥–∏–º README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
readme_content = '''# English Learning Telegram Bot with Neural Network

–≠—Ç–æ Telegram-–±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø—Ä–æ—Å—Ç—É—é –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –Ω–∞ NumPy –∏ pandas.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:
- üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
- üìö –£—Ä–æ–∫–∏ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞
- üìù –û–±—ä—è—Å–Ω–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏  
- üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞:

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
```bash
pip install -r requirements.txt
```

2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É @BotFather –≤ Telegram

3. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –≤ –∫–æ–¥–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:
```bash
python english_learning_telegram_bot.py
```

## –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
- `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
- `/vocabulary` - –£—Ä–æ–∫ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞
- `/grammar` - –£—Ä–æ–∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
- `/practice` - –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- `/progress` - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- **SimpleNeuralNetwork**: –ö–ª–∞—Å—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ —Å –¥–≤—É–º—è —Å–ª–æ—è–º–∏
- **EnglishLearningBot**: –û–±—Ä–∞–±–æ—Ç–∫–∞ NLP –∏ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
- **TelegramEnglishBot**: –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞

## –§–∞–π–ª—ã:
- `english_learning_telegram_bot.py` - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
- `english_learning_intents.json` - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
- `requirements.txt` - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
'''

with open('README.md', 'w', encoding='utf-8') as f:
    f.write(readme_content)

print("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª README.md —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏")
print("\n–í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –≥–æ—Ç–æ–≤—ã!")